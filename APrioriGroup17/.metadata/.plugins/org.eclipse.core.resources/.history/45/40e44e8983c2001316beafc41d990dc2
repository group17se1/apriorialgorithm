package APrioriMiner;

import java.util.Date;
import java.util.HashSet;
import java.io.IOException;
import java.sql.*;

public class DataAccessObject {

	/*************
	 * VARIABLES *
	 *************/
	private java.sql.Date date;
	private double supportLevel;
	private double confidenceLevel;

	/****************
	 * CONSTRUCTORS *
	 ****************/
	public DataAccessObject() {
		java.util.Date utilDate = new Date();
		java.sql.Date date = new java.sql.Date(utilDate.getTime());
		this.date = date;
	} // end of default constructor

	/***********************
	 * GETTERS AND SETTERS *
	 ***********************/

	public java.sql.Date getDate() {
		return date;
	}

	public void setDate(java.sql.Date date) {
		this.date = date;
	}

	public double getSupportLevel() {
		return supportLevel;
	}

	public void setSupportLevel(double supportLevel) {
		this.supportLevel = supportLevel;
	}

	public double getConfidenceLevel() {
		return confidenceLevel;
	}

	/***********
	 * METHODS *
	 ***********/
	public Connection connect(){

		// initializing our database information
		String username = "CS355GROUP17";
		String password = "K564781$";

		// getting driver
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Class.forName("org.gjt.mm.Driver");
			System.out.println("driver loaded");
		} catch (ClassNotFoundException e) {
			System.out.println("ERROR: Unable to retrieve driver");
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// connecting to database
		Connection connection = null;
		try {
			connection = DriverManager.getConnection("jdbc:mysql://dario.cs.uwec.edu/" + username, username, password);
			System.out.println("connection established");
		} catch (SQLException e) {
			System.out.println("ERROR: Unable to connect to database");
			System.out.println(e.getMessage());
			System.exit(1);
		}		

		return connection;

	} // end of connect

	private void disconnect(Connection connection, Statement statement){

		// closing connection
		try {
			if(statement != null){
				statement.close();
				System.out.println("statement closed");
			}
			if(connection != null){
				connection.close();
				System.out.println("connection closed");

			}
		} catch (SQLException e) {
			System.out.println("ERROR: Unable to close connection");
			System.out.println(e.getMessage());
			System.exit(1);
		}

	} // end of disconnect

	public void getSettings() {

		// establish database connection
		Connection connection = connect();

		// initialize variables for query
		Statement stmt = null;
		ResultSet results = null;
		String query = "SELECT support_level, confidence_level FROM settings WHERE settings_ID >= 0 LIMIT 1";

		// attempt to execute query
		try {
			stmt = connection.createStatement();
			results = stmt.executeQuery(query);
			// set support and confidence levels
			while (results.next()) {
				this.supportLevel = results.getDouble("support_level");
				this.confidenceLevel = results.getDouble("confidence_level");
			}
		} catch (SQLException e) {
			System.out.println("ERROR: Unable to retrieve settings");
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// clean up and disconnect
		disconnect(connection, stmt);

	} // end of getSettings

	public boolean updateSettings(double supportLevel, double confidenceLevel){

		// initialize return value
		boolean success = false;

		// establish database connection
		Connection connection = connect();

		// initialize variables for query
		int resultCode = 0;
		PreparedStatement stmt = null;

		// attempt to execute query
		try {
			stmt = connection.prepareStatement("UPDATE settings SET support_level = ? , confidence_level = ? WHERE settings_ID >= 0");
			stmt.setFloat(1, (float) supportLevel);
			stmt.setFloat(2, (float) confidenceLevel);
			stmt.execute();
		} catch (SQLException e) {
			System.out.println("ERROR: Unable to update settings");
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// checking if update successfully completed
		if (resultCode == 1){
			// upon success, updating settings locally
			this.supportLevel = supportLevel;
			this.confidenceLevel = confidenceLevel;
			success = true;
		}

		// clean up and disconnect
		disconnect(connection, stmt);

		//returning result
		return success;

	} // end of updateSettings

	public void uploadTransaction(String store, String startDate, String endDate, HashSet<ItemSet> transaction){

		// establish database connection
		Connection connection = connect();

		// initialize variables for query
		PreparedStatement stmt = null;

		// attempt to execute query
		try {
			stmt = connection.prepareStatement("INSERT INTO transactions(transaction_store, transaction_start_date, transaction_end_date, transaction_set) VALUES(?,?,?,?)");
			stmt.setString(1, store);
			stmt.setString(2, startDate);
			stmt.setString(3, endDate);
			stmt.setString(4, transaction.toString());
			stmt.execute();
		} catch (SQLException e){
			System.out.println("ERROR: Unable to upload transaction");
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// clean up and disconnect
		disconnect(connection, stmt);

	} // end of uploadTransaction

	public void uploadAssociations(String startDate, HashSet<AssociationRule> associationSet){

		// convert association rule hashset into array
		Object[] associationArray = associationSet.toArray();

		// establish database connection
		Connection connection = connect();

		// initialize variables for query
		PreparedStatement stmt = null;

		for (int i = 0; i < associationArray.length; i++){
			// re-establishing variable types
			AssociationRule association = (AssociationRule) associationArray[i];
			ItemSet consequent = association.consequent;
			ItemSet antecedent = association.antecedent;
			double supportLevel = association.supportLevel;
			double confidenceLevel = association.confidenceLevel;

			// attempt to execute query
			try {
				stmt = connection.prepareStatement("INSERT INTO associations(support_level, confidence_level, consequent, antecedent, transaction_ID) VALUES(?,?,?,?,(SELECT transaction_ID FROM transactions WHERE transaction_start_date = ? LIMIT 1));");
				stmt.setFloat(1, (float) supportLevel);
				stmt.setFloat(2, (float) confidenceLevel);
				stmt.setString(3, consequent.toString());
				stmt.setString(4, antecedent.toString());
				stmt.setString(5, startDate);
				stmt.execute();
			} catch (SQLException e) {
				System.out.println("ERROR: Unable to upload associations");
				System.out.println(e.getMessage());
				System.exit(1);
			}
		}

		// clean up and disconnect
		disconnect(connection, stmt);

	} // end of uploadAssociations


	// readEntry method taken from Dr. Paul Wagner's sample DAO code
	public static String readEntry(String prompt) {
		try
		{
			StringBuffer buffer = new StringBuffer();
			System.out.print(prompt);
			System.out.flush();
			int c = System.in.read();
			while (c != '\n' && c != -1) // while not newline or EOF
			{
				buffer.append((char) c);
				c = System.in.read();
			}
			return buffer.toString().trim();
		} catch (IOException e)
		{
			return "";
		}
	} // --- end - readEntry method

} // end of DataAccessObject class