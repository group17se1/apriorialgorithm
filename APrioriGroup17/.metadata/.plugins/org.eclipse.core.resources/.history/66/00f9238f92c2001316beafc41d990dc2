package APrioriMiner;

import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;

import org.junit.Test;

public class APrioriTests {
	
	double confidenceLevel = 0.5;
	String filepath = "src/test.txt";
	
	
	@Test
	public void testAssociationRuleConstructor() {
//		testing constructor
		Item item = new Item("beer");
		Item item2 = new Item("dipper");
		ItemSet set = new ItemSet(item);
		ItemSet consequentIn = new ItemSet(item2);
		AssociationRule ar = new AssociationRule(set, consequentIn, confidenceLevel);
		assertNotNull(ar);
	}
	
	@Test
	public void testAssociationRuleDuplicateItems(){

//		testing constructor for duplicate item
		Item item = new Item("beer");
		Item item2 = new Item("dipper");
		ItemSet set = new ItemSet(item);
		ItemSet consequentIn = new ItemSet(item2);
		consequentIn.add(item);
		AssociationRule ar = new AssociationRule(set, consequentIn, confidenceLevel);
		assertFalse(ar.consequent.contains(item));
		
	}
		
	@Test
	public void testAssociationRuleGettersAndSetters() {
		
//		testing getters and setters
		Item item = new Item("beer");
		Item item2 = new Item("dipper");
		ItemSet set = new ItemSet(item);
		ItemSet consequentIn = new ItemSet(item2);
		AssociationRule ar = new AssociationRule(set, consequentIn, confidenceLevel);
		
		ar.setSupportLevel(0.44);
		ar.setConsequent(set);
		assertEquals("ItemSet antecedent should have all consequentIn items", ar.getAntecedent().items, consequentIn.items);
		// Association Rule variable values should not be null
		assertNotNull(ar.supportLevel);
		assertNotNull(ar.consequent);
		assertNotNull(ar.antecedent);
		assertNotNull(ar.getAntecedent());
		assertNotNull(ar.getConfidenceLevel());
		assertNotNull(ar.getConsequent());
		assertNotNull(ar.getSupportLevel());
	}
	
	
	@Test
	public void testItemSetConstructor(){
		Item item = new Item("beer");
		Item item2 = new Item("dipper");
		Item item3 = new Item("");

		//		testing constructor with hashset
		HashSet<Item> hs = new HashSet<Item>();
		hs.add(item);
		hs.add(item2);
		ItemSet set1 = new ItemSet(hs);
		assertNotNull(set1);
		assertNotNull(set1.items);
		assertEquals(set1.getCount(), 1);
		
//		testing constructor with item
		ItemSet set2 = new ItemSet(item);
		assertNotNull(set2);
		assertNotNull(set2.items);
		assertEquals(set2.getCount(), 1);
		
//		testing constructor with empty item
		ItemSet set3 = new ItemSet(item3);
		assertNotNull(set3.getItems());		
		
	}
	
	@Test
	public void testItemSetGettersAndSetters(){
		
		Item item = new Item("beer");
		Item item2 = new Item("dipper");

		//		testing getters and setters
		ItemSet set = new ItemSet(item);
		assertNotNull(set.getCount());
		set.increment(5);
		assertEquals(set.getCount(), 6);
		set.setCount(33);
		assertEquals(set.getCount(), 33);
		assertFalse(set.contains(item2));
		set.add(item2);
		assertTrue(set.contains(item2));
	}
	
	@Test 
	public void testItemSetMethods(){
		Item item1 = new Item("beer");
		Item item2 = new Item("dipper");
		
		ItemSet set1 = new ItemSet(item1);
		ItemSet set2 = new ItemSet(item2);
		
		//equals()
		assertFalse(set1.equals(set2));
		
		set2.add(item1);
		set1.add(item2);
		assertTrue(set1.equals(set2));
		
		
		//duplicateItems(ItemSet set)
		for(int i = 0; i < 5; i++){
			set1.add(item1);
		}
		
		
		assertEquals(set1.duplicateItems(set2), 2);
	}
	
	@Test
	public void testItemConstructor(){
//		testing constructor
		Item item1 = new Item("beer");
		assertNotNull(item1);
		assertNotNull(item1.getName());
		
//		testing constructor with empty item
		Item item2 = new Item("");
		assertNotNull(item2);
		assertSame(item2.getName(), "");
	}

	@Test
	public void testItemGettersAndSetters(){
//		testing getters and setters
		Item item1 = new Item("beer");
		Item item2 = new Item("dipper");
		assertEquals(item1.getName(), "beer");
		assertEquals(item2.getName(), "dipper");
		
		item1.setName("glasses");
		assertNotEquals(item1.getName(), "beer");
		assertEquals(item1.getName(), "glasses");
		assertFalse(item1.equals(item2));
		assertTrue(item1.equals(new Item("glasses")));
		
		item1.setName("underwear");
		item2.setName("underwear");
		assertTrue(item1.equals(item2));
	}

	@Test
	public void testDAOConstructor(){
		DataAccessObject dao = new DataAccessObject();
		assertNotNull(dao);
		assertNotNull(dao.getDate());
	}
	
	@Test
	public void testDAOGettersAndSetters() throws ParseException{
		DataAccessObject dao = new DataAccessObject();
		java.util.Date utilDate = new Date();
		java.sql.Date date = new java.sql.Date(utilDate.getTime());
//		assertSame(dao.getDate(), date);

        Date date1 = new SimpleDateFormat("MMddyyyy").parse("04152015");
		java.sql.Date date = new java.sql.Date(date1.getTime()());
        dao.setDate());
        System.out.println(dao.getDate());
        assertEquals(dao.getDate(), );
        
		dao.getConfidenceLevel();
		dao.getSettings();
		dao.getSupportLevel();
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}

